webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _platformBrowserDynamic = __webpack_require__(1);
	
	var _appModuleNgfactory = __webpack_require__(23);
	
	(0, _platformBrowserDynamic.platformBrowserDynamic)().bootstrapModuleFactory(_appModuleNgfactory.AppModuleNgFactory);

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * @fileoverview This file is generated by the Angular 2 template compiler.
	 * Do not edit.
	 * @suppress {suspiciousCode,uselessCode,missingProperties}
	 */
	/* tslint:disable */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(25), __webpack_require__(26), __webpack_require__(28), __webpack_require__(29), __webpack_require__(30), __webpack_require__(31), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(39), __webpack_require__(40), __webpack_require__(24), __webpack_require__(41), __webpack_require__(42), __webpack_require__(48), __webpack_require__(49), __webpack_require__(50), __webpack_require__(51), __webpack_require__(52), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(57), __webpack_require__(58), __webpack_require__(59), __webpack_require__(60), __webpack_require__(61)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, import0, import1, import2, import3, import4, import5, import6, import7, import8, import9, import10, import11, import12, import13, import14, import15, import16, import18, import19, import20, import21, import22, import23, import24, import25, import26, import27, import28, import29, import30, import31, import32) {
	    "use strict";
	    var AppModuleInjector = (function (_super) {
	        __extends(AppModuleInjector, _super);
	        function AppModuleInjector(parent) {
	            _super.call(this, parent, [import18.AppComponentNgFactory], [import18.AppComponentNgFactory]);
	        }
	        Object.defineProperty(AppModuleInjector.prototype, "_LOCALE_ID_4", {
	            get: function () {
	                if ((this.__LOCALE_ID_4 == null)) {
	                    (this.__LOCALE_ID_4 = 'en-US');
	                }
	                return this.__LOCALE_ID_4;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_NgLocalization_5", {
	            get: function () {
	                if ((this.__NgLocalization_5 == null)) {
	                    (this.__NgLocalization_5 = new import5.NgLocaleLocalization(this._LOCALE_ID_4));
	                }
	                return this.__NgLocalization_5;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_ApplicationRef_10", {
	            get: function () {
	                if ((this.__ApplicationRef_10 == null)) {
	                    (this.__ApplicationRef_10 = this._ApplicationRef__9);
	                }
	                return this.__ApplicationRef_10;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_Compiler_11", {
	            get: function () {
	                if ((this.__Compiler_11 == null)) {
	                    (this.__Compiler_11 = new import9.Compiler());
	                }
	                return this.__Compiler_11;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_APP_ID_12", {
	            get: function () {
	                if ((this.__APP_ID_12 == null)) {
	                    (this.__APP_ID_12 = import19._appIdRandomProviderFactory());
	                }
	                return this.__APP_ID_12;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_DOCUMENT_13", {
	            get: function () {
	                if ((this.__DOCUMENT_13 == null)) {
	                    (this.__DOCUMENT_13 = import4._document());
	                }
	                return this.__DOCUMENT_13;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_HAMMER_GESTURE_CONFIG_14", {
	            get: function () {
	                if ((this.__HAMMER_GESTURE_CONFIG_14 == null)) {
	                    (this.__HAMMER_GESTURE_CONFIG_14 = new import10.HammerGestureConfig());
	                }
	                return this.__HAMMER_GESTURE_CONFIG_14;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_EVENT_MANAGER_PLUGINS_15", {
	            get: function () {
	                if ((this.__EVENT_MANAGER_PLUGINS_15 == null)) {
	                    (this.__EVENT_MANAGER_PLUGINS_15 = [
	                        new import20.DomEventsPlugin(),
	                        new import21.KeyEventsPlugin(),
	                        new import10.HammerGesturesPlugin(this._HAMMER_GESTURE_CONFIG_14)
	                    ]);
	                }
	                return this.__EVENT_MANAGER_PLUGINS_15;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_EventManager_16", {
	            get: function () {
	                if ((this.__EventManager_16 == null)) {
	                    (this.__EventManager_16 = new import11.EventManager(this._EVENT_MANAGER_PLUGINS_15, this.parent.get(import22.NgZone)));
	                }
	                return this.__EventManager_16;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_DomSharedStylesHost_17", {
	            get: function () {
	                if ((this.__DomSharedStylesHost_17 == null)) {
	                    (this.__DomSharedStylesHost_17 = new import12.DomSharedStylesHost(this._DOCUMENT_13));
	                }
	                return this.__DomSharedStylesHost_17;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_AnimationDriver_18", {
	            get: function () {
	                if ((this.__AnimationDriver_18 == null)) {
	                    (this.__AnimationDriver_18 = import4._resolveDefaultAnimationDriver());
	                }
	                return this.__AnimationDriver_18;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_DomRootRenderer_19", {
	            get: function () {
	                if ((this.__DomRootRenderer_19 == null)) {
	                    (this.__DomRootRenderer_19 = new import13.DomRootRenderer_(this._DOCUMENT_13, this._EventManager_16, this._DomSharedStylesHost_17, this._AnimationDriver_18, this._APP_ID_12));
	                }
	                return this.__DomRootRenderer_19;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_RootRenderer_20", {
	            get: function () {
	                if ((this.__RootRenderer_20 == null)) {
	                    (this.__RootRenderer_20 = import23._createConditionalRootRenderer(this._DomRootRenderer_19, this.parent.get(import23.NgProbeToken, null)));
	                }
	                return this.__RootRenderer_20;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_DomSanitizer_21", {
	            get: function () {
	                if ((this.__DomSanitizer_21 == null)) {
	                    (this.__DomSanitizer_21 = new import14.DomSanitizerImpl());
	                }
	                return this.__DomSanitizer_21;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_Sanitizer_22", {
	            get: function () {
	                if ((this.__Sanitizer_22 == null)) {
	                    (this.__Sanitizer_22 = this._DomSanitizer_21);
	                }
	                return this.__Sanitizer_22;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_ViewUtils_23", {
	            get: function () {
	                if ((this.__ViewUtils_23 == null)) {
	                    (this.__ViewUtils_23 = new import15.ViewUtils(this._RootRenderer_20, this._Sanitizer_22));
	                }
	                return this.__ViewUtils_23;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_IterableDiffers_24", {
	            get: function () {
	                if ((this.__IterableDiffers_24 == null)) {
	                    (this.__IterableDiffers_24 = import3._iterableDiffersFactory());
	                }
	                return this.__IterableDiffers_24;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_KeyValueDiffers_25", {
	            get: function () {
	                if ((this.__KeyValueDiffers_25 == null)) {
	                    (this.__KeyValueDiffers_25 = import3._keyValueDiffersFactory());
	                }
	                return this.__KeyValueDiffers_25;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_SharedStylesHost_26", {
	            get: function () {
	                if ((this.__SharedStylesHost_26 == null)) {
	                    (this.__SharedStylesHost_26 = this._DomSharedStylesHost_17);
	                }
	                return this.__SharedStylesHost_26;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppModuleInjector.prototype, "_Title_27", {
	            get: function () {
	                if ((this.__Title_27 == null)) {
	                    (this.__Title_27 = new import16.Title());
	                }
	                return this.__Title_27;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        AppModuleInjector.prototype.createInternal = function () {
	            this._CommonModule_0 = new import2.CommonModule();
	            this._ApplicationModule_1 = new import3.ApplicationModule();
	            this._BrowserModule_2 = new import4.BrowserModule(this.parent.get(import4.BrowserModule, null));
	            this._AppModule_3 = new import1.AppModule();
	            this._ErrorHandler_6 = import4.errorHandler();
	            this._ApplicationInitStatus_7 = new import6.ApplicationInitStatus(this.parent.get(import6.APP_INITIALIZER, null));
	            this._Testability_8 = new import7.Testability(this.parent.get(import22.NgZone));
	            this._ApplicationRef__9 = new import8.ApplicationRef_(this.parent.get(import22.NgZone), this.parent.get(import24.Console), this, this._ErrorHandler_6, this, this._ApplicationInitStatus_7, this.parent.get(import7.TestabilityRegistry, null), this._Testability_8);
	            return this._AppModule_3;
	        };
	        AppModuleInjector.prototype.getInternal = function (token, notFoundResult) {
	            if ((token === import2.CommonModule)) {
	                return this._CommonModule_0;
	            }
	            if ((token === import3.ApplicationModule)) {
	                return this._ApplicationModule_1;
	            }
	            if ((token === import4.BrowserModule)) {
	                return this._BrowserModule_2;
	            }
	            if ((token === import1.AppModule)) {
	                return this._AppModule_3;
	            }
	            if ((token === import25.LOCALE_ID)) {
	                return this._LOCALE_ID_4;
	            }
	            if ((token === import5.NgLocalization)) {
	                return this._NgLocalization_5;
	            }
	            if ((token === import26.ErrorHandler)) {
	                return this._ErrorHandler_6;
	            }
	            if ((token === import6.ApplicationInitStatus)) {
	                return this._ApplicationInitStatus_7;
	            }
	            if ((token === import7.Testability)) {
	                return this._Testability_8;
	            }
	            if ((token === import8.ApplicationRef_)) {
	                return this._ApplicationRef__9;
	            }
	            if ((token === import8.ApplicationRef)) {
	                return this._ApplicationRef_10;
	            }
	            if ((token === import9.Compiler)) {
	                return this._Compiler_11;
	            }
	            if ((token === import19.APP_ID)) {
	                return this._APP_ID_12;
	            }
	            if ((token === import27.DOCUMENT)) {
	                return this._DOCUMENT_13;
	            }
	            if ((token === import10.HAMMER_GESTURE_CONFIG)) {
	                return this._HAMMER_GESTURE_CONFIG_14;
	            }
	            if ((token === import11.EVENT_MANAGER_PLUGINS)) {
	                return this._EVENT_MANAGER_PLUGINS_15;
	            }
	            if ((token === import11.EventManager)) {
	                return this._EventManager_16;
	            }
	            if ((token === import12.DomSharedStylesHost)) {
	                return this._DomSharedStylesHost_17;
	            }
	            if ((token === import28.AnimationDriver)) {
	                return this._AnimationDriver_18;
	            }
	            if ((token === import13.DomRootRenderer)) {
	                return this._DomRootRenderer_19;
	            }
	            if ((token === import29.RootRenderer)) {
	                return this._RootRenderer_20;
	            }
	            if ((token === import14.DomSanitizer)) {
	                return this._DomSanitizer_21;
	            }
	            if ((token === import30.Sanitizer)) {
	                return this._Sanitizer_22;
	            }
	            if ((token === import15.ViewUtils)) {
	                return this._ViewUtils_23;
	            }
	            if ((token === import31.IterableDiffers)) {
	                return this._IterableDiffers_24;
	            }
	            if ((token === import32.KeyValueDiffers)) {
	                return this._KeyValueDiffers_25;
	            }
	            if ((token === import12.SharedStylesHost)) {
	                return this._SharedStylesHost_26;
	            }
	            if ((token === import16.Title)) {
	                return this._Title_27;
	            }
	            return notFoundResult;
	        };
	        AppModuleInjector.prototype.destroyInternal = function () {
	            this._ApplicationRef__9.ngOnDestroy();
	        };
	        return AppModuleInjector;
	    }(import0.NgModuleInjector));
	    exports.AppModuleNgFactory = new import0.NgModuleFactory(AppModuleInjector, import1.AppModule);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	//# sourceMappingURL=app.module.ngfactory.js.map

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { devModeEqual } from '../change_detection/change_detection';
	import { UNINITIALIZED } from '../change_detection/change_detection_util';
	import { Injectable } from '../di';
	import { isPresent, looseIdentical } from '../facade/lang';
	import { RenderComponentType, RootRenderer } from '../render/api';
	import { Sanitizer } from '../security';
	import { ExpressionChangedAfterItHasBeenCheckedError } from './errors';
	export var ViewUtils = (function () {
	    function ViewUtils(_renderer, sanitizer) {
	        this._renderer = _renderer;
	        this._nextCompTypeId = 0;
	        this.sanitizer = sanitizer;
	    }
	    /** @internal */
	    ViewUtils.prototype.renderComponent = function (renderComponentType) {
	        return this._renderer.renderComponent(renderComponentType);
	    };
	    ViewUtils.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    ViewUtils.ctorParameters = [
	        { type: RootRenderer, },
	        { type: Sanitizer, },
	    ];
	    return ViewUtils;
	}());
	var nextRenderComponentTypeId = 0;
	export function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
	    return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	}
	export function addToArray(e, array) {
	    array.push(e);
	}
	export function interpolate(valueCount, constAndInterp) {
	    var result = '';
	    for (var i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	export function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	export function checkBinding(throwOnChange, oldValue, newValue) {
	    if (throwOnChange) {
	        if (!devModeEqual(oldValue, newValue)) {
	            throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	        }
	        return false;
	    }
	    else {
	        return !looseIdentical(oldValue, newValue);
	    }
	}
	export function castByValue(input, value) {
	    return input;
	}
	export var EMPTY_ARRAY = [];
	export var EMPTY_MAP = {};
	export function pureProxy1(fn) {
	    var result;
	    var v0 = UNINITIALIZED;
	    return function (p0) {
	        if (!looseIdentical(v0, p0)) {
	            v0 = p0;
	            result = fn(p0);
	        }
	        return result;
	    };
	}
	export function pureProxy2(fn) {
	    var result;
	    var v0 = UNINITIALIZED;
	    var v1 = UNINITIALIZED;
	    return function (p0, p1) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	            v0 = p0;
	            v1 = p1;
	            result = fn(p0, p1);
	        }
	        return result;
	    };
	}
	export function pureProxy3(fn) {
	    var result;
	    var v0 = UNINITIALIZED;
	    var v1 = UNINITIALIZED;
	    var v2 = UNINITIALIZED;
	    return function (p0, p1, p2) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            result = fn(p0, p1, p2);
	        }
	        return result;
	    };
	}
	export function pureProxy4(fn) {
	    var result;
	    var v0, v1, v2, v3;
	    v0 = v1 = v2 = v3 = UNINITIALIZED;
	    return function (p0, p1, p2, p3) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            result = fn(p0, p1, p2, p3);
	        }
	        return result;
	    };
	}
	export function pureProxy5(fn) {
	    var result;
	    var v0, v1, v2, v3, v4;
	    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            result = fn(p0, p1, p2, p3, p4);
	        }
	        return result;
	    };
	}
	export function pureProxy6(fn) {
	    var result;
	    var v0, v1, v2, v3, v4, v5;
	    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4, p5) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            v5 = p5;
	            result = fn(p0, p1, p2, p3, p4, p5);
	        }
	        return result;
	    };
	}
	export function pureProxy7(fn) {
	    var result;
	    var v0, v1, v2, v3, v4, v5, v6;
	    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4, p5, p6) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	            !looseIdentical(v6, p6)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            v5 = p5;
	            v6 = p6;
	            result = fn(p0, p1, p2, p3, p4, p5, p6);
	        }
	        return result;
	    };
	}
	export function pureProxy8(fn) {
	    var result;
	    var v0, v1, v2, v3, v4, v5, v6, v7;
	    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	            !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            v5 = p5;
	            v6 = p6;
	            v7 = p7;
	            result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	        }
	        return result;
	    };
	}
	export function pureProxy9(fn) {
	    var result;
	    var v0, v1, v2, v3, v4, v5, v6, v7, v8;
	    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            v5 = p5;
	            v6 = p6;
	            v7 = p7;
	            v8 = p8;
	            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	        }
	        return result;
	    };
	}
	export function pureProxy10(fn) {
	    var result;
	    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
	    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	            !looseIdentical(v9, p9)) {
	            v0 = p0;
	            v1 = p1;
	            v2 = p2;
	            v3 = p3;
	            v4 = p4;
	            v5 = p5;
	            v6 = p6;
	            v7 = p7;
	            v8 = p8;
	            v9 = p9;
	            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	        }
	        return result;
	    };
	}
	export function setBindingDebugInfoForChanges(renderer, el, changes) {
	    Object.keys(changes).forEach(function (propName) {
	        setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
	    });
	}
	export function setBindingDebugInfo(renderer, el, propName, value) {
	    try {
	        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
	    }
	    catch (e) {
	        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
	    }
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i - 0] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	export function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
	    var el = renderer.createElement(parentElement, name, debugInfo);
	    for (var i = 0; i < attrs.length; i += 2) {
	        renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
	    }
	    return el;
	}
	export function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
	    var hostElement;
	    if (isPresent(rootSelectorOrNode)) {
	        hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	        for (var i = 0; i < attrs.length; i += 2) {
	            renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
	        }
	    }
	    else {
	        hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
	    }
	    return hostElement;
	}
	export function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
	    var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
	    for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
	        var eventName = eventNamesAndTargets.get(i);
	        var eventTarget = eventNamesAndTargets.get(i + 1);
	        var disposable = void 0;
	        if (eventTarget) {
	            disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
	        }
	        else {
	            disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
	        }
	        disposables.set(i / 2, disposable);
	    }
	    return disposeInlineArray.bind(null, disposables);
	}
	function disposeInlineArray(disposables) {
	    for (var i = 0; i < disposables.length; i++) {
	        disposables.get(i)();
	    }
	}
	export function noop() { }
	function createEmptyInlineArray(length) {
	    var ctor;
	    if (length <= 2) {
	        ctor = InlineArray2;
	    }
	    else if (length <= 4) {
	        ctor = InlineArray4;
	    }
	    else if (length <= 8) {
	        ctor = InlineArray8;
	    }
	    else if (length <= 16) {
	        ctor = InlineArray16;
	    }
	    else {
	        ctor = InlineArrayDynamic;
	    }
	    return new ctor(length);
	}
	var InlineArray0 = (function () {
	    function InlineArray0() {
	        this.length = 0;
	    }
	    InlineArray0.prototype.get = function (index) { return undefined; };
	    InlineArray0.prototype.set = function (index, value) { };
	    return InlineArray0;
	}());
	export var InlineArray2 = (function () {
	    function InlineArray2(length, _v0, _v1) {
	        this.length = length;
	        this._v0 = _v0;
	        this._v1 = _v1;
	    }
	    InlineArray2.prototype.get = function (index) {
	        switch (index) {
	            case 0:
	                return this._v0;
	            case 1:
	                return this._v1;
	            default:
	                return undefined;
	        }
	    };
	    InlineArray2.prototype.set = function (index, value) {
	        switch (index) {
	            case 0:
	                this._v0 = value;
	                break;
	            case 1:
	                this._v1 = value;
	                break;
	        }
	    };
	    return InlineArray2;
	}());
	export var InlineArray4 = (function () {
	    function InlineArray4(length, _v0, _v1, _v2, _v3) {
	        this.length = length;
	        this._v0 = _v0;
	        this._v1 = _v1;
	        this._v2 = _v2;
	        this._v3 = _v3;
	    }
	    InlineArray4.prototype.get = function (index) {
	        switch (index) {
	            case 0:
	                return this._v0;
	            case 1:
	                return this._v1;
	            case 2:
	                return this._v2;
	            case 3:
	                return this._v3;
	            default:
	                return undefined;
	        }
	    };
	    InlineArray4.prototype.set = function (index, value) {
	        switch (index) {
	            case 0:
	                this._v0 = value;
	                break;
	            case 1:
	                this._v1 = value;
	                break;
	            case 2:
	                this._v2 = value;
	                break;
	            case 3:
	                this._v3 = value;
	                break;
	        }
	    };
	    return InlineArray4;
	}());
	export var InlineArray8 = (function () {
	    function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
	        this.length = length;
	        this._v0 = _v0;
	        this._v1 = _v1;
	        this._v2 = _v2;
	        this._v3 = _v3;
	        this._v4 = _v4;
	        this._v5 = _v5;
	        this._v6 = _v6;
	        this._v7 = _v7;
	    }
	    InlineArray8.prototype.get = function (index) {
	        switch (index) {
	            case 0:
	                return this._v0;
	            case 1:
	                return this._v1;
	            case 2:
	                return this._v2;
	            case 3:
	                return this._v3;
	            case 4:
	                return this._v4;
	            case 5:
	                return this._v5;
	            case 6:
	                return this._v6;
	            case 7:
	                return this._v7;
	            default:
	                return undefined;
	        }
	    };
	    InlineArray8.prototype.set = function (index, value) {
	        switch (index) {
	            case 0:
	                this._v0 = value;
	                break;
	            case 1:
	                this._v1 = value;
	                break;
	            case 2:
	                this._v2 = value;
	                break;
	            case 3:
	                this._v3 = value;
	                break;
	            case 4:
	                this._v4 = value;
	                break;
	            case 5:
	                this._v5 = value;
	                break;
	            case 6:
	                this._v6 = value;
	                break;
	            case 7:
	                this._v7 = value;
	                break;
	        }
	    };
	    return InlineArray8;
	}());
	export var InlineArray16 = (function () {
	    function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
	        this.length = length;
	        this._v0 = _v0;
	        this._v1 = _v1;
	        this._v2 = _v2;
	        this._v3 = _v3;
	        this._v4 = _v4;
	        this._v5 = _v5;
	        this._v6 = _v6;
	        this._v7 = _v7;
	        this._v8 = _v8;
	        this._v9 = _v9;
	        this._v10 = _v10;
	        this._v11 = _v11;
	        this._v12 = _v12;
	        this._v13 = _v13;
	        this._v14 = _v14;
	        this._v15 = _v15;
	    }
	    InlineArray16.prototype.get = function (index) {
	        switch (index) {
	            case 0:
	                return this._v0;
	            case 1:
	                return this._v1;
	            case 2:
	                return this._v2;
	            case 3:
	                return this._v3;
	            case 4:
	                return this._v4;
	            case 5:
	                return this._v5;
	            case 6:
	                return this._v6;
	            case 7:
	                return this._v7;
	            case 8:
	                return this._v8;
	            case 9:
	                return this._v9;
	            case 10:
	                return this._v10;
	            case 11:
	                return this._v11;
	            case 12:
	                return this._v12;
	            case 13:
	                return this._v13;
	            case 14:
	                return this._v14;
	            case 15:
	                return this._v15;
	            default:
	                return undefined;
	        }
	    };
	    InlineArray16.prototype.set = function (index, value) {
	        switch (index) {
	            case 0:
	                this._v0 = value;
	                break;
	            case 1:
	                this._v1 = value;
	                break;
	            case 2:
	                this._v2 = value;
	                break;
	            case 3:
	                this._v3 = value;
	                break;
	            case 4:
	                this._v4 = value;
	                break;
	            case 5:
	                this._v5 = value;
	                break;
	            case 6:
	                this._v6 = value;
	                break;
	            case 7:
	                this._v7 = value;
	                break;
	            case 8:
	                this._v8 = value;
	                break;
	            case 9:
	                this._v9 = value;
	                break;
	            case 10:
	                this._v10 = value;
	                break;
	            case 11:
	                this._v11 = value;
	                break;
	            case 12:
	                this._v12 = value;
	                break;
	            case 13:
	                this._v13 = value;
	                break;
	            case 14:
	                this._v14 = value;
	                break;
	            case 15:
	                this._v15 = value;
	                break;
	        }
	    };
	    return InlineArray16;
	}());
	export var InlineArrayDynamic = (function () {
	    // Note: We still take the length argument so this class can be created
	    // in the same ways as the other classes!
	    function InlineArrayDynamic(length) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        this.length = length;
	        this._values = values;
	    }
	    InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
	    InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
	    return InlineArrayDynamic;
	}());
	export var EMPTY_INLINE_ARRAY = new InlineArray0();
	//# sourceMappingURL=view_utils.js.map

/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Injector, THROW_IF_NOT_FOUND } from '../di/injector';
	import { unimplemented } from '../facade/errors';
	import { stringify } from '../facade/lang';
	import { CodegenComponentFactoryResolver, ComponentFactoryResolver } from './component_factory_resolver';
	/**
	 * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 * @stable
	 */
	export var NgModuleRef = (function () {
	    function NgModuleRef() {
	    }
	    Object.defineProperty(NgModuleRef.prototype, "injector", {
	        /**
	         * The injector that contains all of the providers of the NgModule.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
	        /**
	         * The ComponentFactoryResolver to get hold of the ComponentFactories
	         * declared in the `entryComponents` property of the module.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleRef.prototype, "instance", {
	        /**
	         * The NgModule instance.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return NgModuleRef;
	}());
	/**
	 * @experimental
	 */
	export var NgModuleFactory = (function () {
	    function NgModuleFactory(_injectorClass, _moduleType) {
	        this._injectorClass = _injectorClass;
	        this._moduleType = _moduleType;
	    }
	    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	        get: function () { return this._moduleType; },
	        enumerable: true,
	        configurable: true
	    });
	    NgModuleFactory.prototype.create = function (parentInjector) {
	        if (!parentInjector) {
	            parentInjector = Injector.NULL;
	        }
	        var instance = new this._injectorClass(parentInjector);
	        instance.create();
	        return instance;
	    };
	    return NgModuleFactory;
	}());
	var _UNDEFINED = new Object();
	export var NgModuleInjector = (function (_super) {
	    __extends(NgModuleInjector, _super);
	    function NgModuleInjector(parent, factories, bootstrapFactories) {
	        _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	        this.parent = parent;
	        this.bootstrapFactories = bootstrapFactories;
	        this._destroyListeners = [];
	        this._destroyed = false;
	    }
	    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	    NgModuleInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (token === Injector || token === ComponentFactoryResolver) {
	            return this;
	        }
	        var result = this.getInternal(token, _UNDEFINED);
	        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	    };
	    Object.defineProperty(NgModuleInjector.prototype, "injector", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    NgModuleInjector.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        this.destroyInternal();
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    return NgModuleInjector;
	}(CodegenComponentFactoryResolver));
	//# sourceMappingURL=ng_module_factory.js.map

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    var c = arguments.length,
	        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
	        d;
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
	        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    }return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(3);
	var platform_browser_1 = __webpack_require__(21);
	var app_component_1 = __webpack_require__(27);
	var AppModule = function () {
	    function AppModule() {}
	    AppModule = __decorate([core_1.NgModule({
	        imports: [platform_browser_1.BrowserModule],
	        declarations: [app_component_1.AppComponent],
	        bootstrap: [app_component_1.AppComponent]
	    }), __metadata('design:paramtypes', [])], AppModule);
	    return AppModule;
	}();
	exports.AppModule = AppModule;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    var c = arguments.length,
	        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
	        d;
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
	        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    }return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(3);
	var AppComponent = function () {
	    function AppComponent() {
	        this.name = 'Angular';
	    }
	    AppComponent = __decorate([core_1.Component({
	        selector: 'my-app',
	        template: "\n    <h1>Hello {{name}}</h1>\n  "
	    }), __metadata('design:paramtypes', [])], AppComponent);
	    return AppComponent;
	}();
	exports.AppComponent = AppComponent;

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { NgModule } from '@angular/core';
	import { COMMON_DIRECTIVES } from './directives/index';
	import { NgLocaleLocalization, NgLocalization } from './localization';
	import { COMMON_PIPES } from './pipes/index';
	// Note: This does not contain the location providers,
	// as they need some platform specific implementations to work.
	/**
	 * The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
	 *
	 * @stable
	 */
	export var CommonModule = (function () {
	    function CommonModule() {
	    }
	    CommonModule.decorators = [
	        { type: NgModule, args: [{
	                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                    providers: [
	                        { provide: NgLocalization, useClass: NgLocaleLocalization },
	                    ],
	                },] },
	    ];
	    /** @nocollapse */
	    CommonModule.ctorParameters = [];
	    return CommonModule;
	}());
	//# sourceMappingURL=common_module.js.map

/***/ },
/* 29 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { ApplicationInitStatus } from './application_init';
	import { ApplicationRef, ApplicationRef_ } from './application_ref';
	import { APP_ID_RANDOM_PROVIDER } from './application_tokens';
	import { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';
	import { LOCALE_ID } from './i18n/tokens';
	import { Compiler } from './linker/compiler';
	import { ViewUtils } from './linker/view_utils';
	import { NgModule } from './metadata';
	export function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	export function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	/**
	 * This module includes the providers of @angular/core that are needed
	 * to bootstrap components via `ApplicationRef`.
	 *
	 * @experimental
	 */
	export var ApplicationModule = (function () {
	    function ApplicationModule() {
	    }
	    ApplicationModule.decorators = [
	        { type: NgModule, args: [{
	                    providers: [
	                        ApplicationRef_,
	                        { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                        ApplicationInitStatus,
	                        Compiler,
	                        APP_ID_RANDOM_PROVIDER,
	                        ViewUtils,
	                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                        { provide: LOCALE_ID, useValue: 'en-US' },
	                    ]
	                },] },
	    ];
	    /** @nocollapse */
	    ApplicationModule.ctorParameters = [];
	    return ApplicationModule;
	}());
	//# sourceMappingURL=application_module.js.map

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { CommonModule, PlatformLocation } from '@angular/common';
	import { ApplicationModule, ErrorHandler, NgModule, Optional, PLATFORM_INITIALIZER, RootRenderer, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore } from '@angular/core';
	import { AnimationDriver } from '../src/dom/animation_driver';
	import { WebAnimationsDriver } from '../src/dom/web_animations_driver';
	import { BrowserDomAdapter } from './browser/browser_adapter';
	import { BrowserPlatformLocation } from './browser/location/browser_platform_location';
	import { BrowserGetTestability } from './browser/testability';
	import { Title } from './browser/title';
	import { ELEMENT_PROBE_PROVIDERS } from './dom/debug/ng_probe';
	import { getDOM } from './dom/dom_adapter';
	import { DomRootRenderer, DomRootRenderer_ } from './dom/dom_renderer';
	import { DOCUMENT } from './dom/dom_tokens';
	import { DomEventsPlugin } from './dom/events/dom_events';
	import { EVENT_MANAGER_PLUGINS, EventManager } from './dom/events/event_manager';
	import { HAMMER_GESTURE_CONFIG, HammerGestureConfig, HammerGesturesPlugin } from './dom/events/hammer_gestures';
	import { KeyEventsPlugin } from './dom/events/key_events';
	import { DomSharedStylesHost, SharedStylesHost } from './dom/shared_styles_host';
	import { DomSanitizer, DomSanitizerImpl } from './security/dom_sanitization_service';
	export var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	    { provide: PlatformLocation, useClass: BrowserPlatformLocation }
	];
	/**
	 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	 * Attacker-controlled data introduced by an unsanitized provider could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 * @experimental
	 */
	export var BROWSER_SANITIZATION_PROVIDERS = [
	    { provide: Sanitizer, useExisting: DomSanitizer },
	    { provide: DomSanitizer, useClass: DomSanitizerImpl },
	];
	/**
	 * @stable
	 */
	export var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	export function initDomAdapter() {
	    BrowserDomAdapter.makeCurrent();
	    BrowserGetTestability.init();
	}
	export function errorHandler() {
	    return new ErrorHandler();
	}
	export function _document() {
	    return getDOM().defaultDoc();
	}
	export function _resolveDefaultAnimationDriver() {
	    if (getDOM().supportsWebAnimation()) {
	        return new WebAnimationsDriver();
	    }
	    return AnimationDriver.NOOP;
	}
	/**
	 * The ng module for the browser.
	 *
	 * @stable
	 */
	export var BrowserModule = (function () {
	    function BrowserModule(parentModule) {
	        if (parentModule) {
	            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	        }
	    }
	    BrowserModule.decorators = [
	        { type: NgModule, args: [{
	                    providers: [
	                        BROWSER_SANITIZATION_PROVIDERS, { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
	                        { provide: DOCUMENT, useFactory: _document, deps: [] },
	                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                        { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                        { provide: RootRenderer, useExisting: DomRootRenderer },
	                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                        { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                        Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                    ],
	                    exports: [CommonModule, ApplicationModule]
	                },] },
	    ];
	    /** @nocollapse */
	    BrowserModule.ctorParameters = [
	        { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
	    ];
	    return BrowserModule;
	}());
	//# sourceMappingURL=browser.js.map

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Inject, Injectable, LOCALE_ID } from '@angular/core';
	/**
	 * @experimental
	 */
	export var NgLocalization = (function () {
	    function NgLocalization() {
	    }
	    return NgLocalization;
	}());
	/**
	 * Returns the plural category for a given value.
	 * - "=value" when the case exists,
	 * - the plural category otherwise
	 *
	 * @internal
	 */
	export function getPluralCategory(value, cases, ngLocalization) {
	    var nbCase = "=" + value;
	    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
	}
	/**
	 * Returns the plural case based on the locale
	 *
	 * @experimental
	 */
	export var NgLocaleLocalization = (function (_super) {
	    __extends(NgLocaleLocalization, _super);
	    function NgLocaleLocalization(_locale) {
	        _super.call(this);
	        this._locale = _locale;
	    }
	    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	        var plural = getPluralCase(this._locale, value);
	        switch (plural) {
	            case Plural.Zero:
	                return 'zero';
	            case Plural.One:
	                return 'one';
	            case Plural.Two:
	                return 'two';
	            case Plural.Few:
	                return 'few';
	            case Plural.Many:
	                return 'many';
	            default:
	                return 'other';
	        }
	    };
	    NgLocaleLocalization.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    NgLocaleLocalization.ctorParameters = [
	        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
	    ];
	    return NgLocaleLocalization;
	}(NgLocalization));
	// This is generated code DO NOT MODIFY
	// see angular2/script/cldr/gen_plural_rules.js
	/** @experimental */
	export var Plural;
	(function (Plural) {
	    Plural[Plural["Zero"] = 0] = "Zero";
	    Plural[Plural["One"] = 1] = "One";
	    Plural[Plural["Two"] = 2] = "Two";
	    Plural[Plural["Few"] = 3] = "Few";
	    Plural[Plural["Many"] = 4] = "Many";
	    Plural[Plural["Other"] = 5] = "Other";
	})(Plural || (Plural = {}));
	/**
	 * Returns the plural case based on the locale
	 *
	 * @experimental
	 */
	export function getPluralCase(locale, nLike) {
	    // TODO(vicb): lazy compute
	    if (typeof nLike === 'string') {
	        nLike = parseInt(nLike, 10);
	    }
	    var n = nLike;
	    var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	    var i = Math.floor(Math.abs(n));
	    var v = nDecimal.length;
	    var f = parseInt(nDecimal, 10);
	    var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	    var lang = locale.split('-')[0].toLowerCase();
	    switch (lang) {
	        case 'af':
	        case 'asa':
	        case 'az':
	        case 'bem':
	        case 'bez':
	        case 'bg':
	        case 'brx':
	        case 'ce':
	        case 'cgg':
	        case 'chr':
	        case 'ckb':
	        case 'ee':
	        case 'el':
	        case 'eo':
	        case 'es':
	        case 'eu':
	        case 'fo':
	        case 'fur':
	        case 'gsw':
	        case 'ha':
	        case 'haw':
	        case 'hu':
	        case 'jgo':
	        case 'jmc':
	        case 'ka':
	        case 'kk':
	        case 'kkj':
	        case 'kl':
	        case 'ks':
	        case 'ksb':
	        case 'ky':
	        case 'lb':
	        case 'lg':
	        case 'mas':
	        case 'mgo':
	        case 'ml':
	        case 'mn':
	        case 'nb':
	        case 'nd':
	        case 'ne':
	        case 'nn':
	        case 'nnh':
	        case 'nyn':
	        case 'om':
	        case 'or':
	        case 'os':
	        case 'ps':
	        case 'rm':
	        case 'rof':
	        case 'rwk':
	        case 'saq':
	        case 'seh':
	        case 'sn':
	        case 'so':
	        case 'sq':
	        case 'ta':
	        case 'te':
	        case 'teo':
	        case 'tk':
	        case 'tr':
	        case 'ug':
	        case 'uz':
	        case 'vo':
	        case 'vun':
	        case 'wae':
	        case 'xog':
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'agq':
	        case 'bas':
	        case 'cu':
	        case 'dav':
	        case 'dje':
	        case 'dua':
	        case 'dyo':
	        case 'ebu':
	        case 'ewo':
	        case 'guz':
	        case 'kam':
	        case 'khq':
	        case 'ki':
	        case 'kln':
	        case 'kok':
	        case 'ksf':
	        case 'lrc':
	        case 'lu':
	        case 'luo':
	        case 'luy':
	        case 'mer':
	        case 'mfe':
	        case 'mgh':
	        case 'mua':
	        case 'mzn':
	        case 'nmg':
	        case 'nus':
	        case 'qu':
	        case 'rn':
	        case 'rw':
	        case 'sbp':
	        case 'twq':
	        case 'vai':
	        case 'yav':
	        case 'yue':
	        case 'zgh':
	        case 'ak':
	        case 'ln':
	        case 'mg':
	        case 'pa':
	        case 'ti':
	            if (n === Math.floor(n) && n >= 0 && n <= 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'am':
	        case 'as':
	        case 'bn':
	        case 'fa':
	        case 'gu':
	        case 'hi':
	        case 'kn':
	        case 'mr':
	        case 'zu':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'ar':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                return Plural.Many;
	            return Plural.Other;
	        case 'ast':
	        case 'ca':
	        case 'de':
	        case 'en':
	        case 'et':
	        case 'fi':
	        case 'fy':
	        case 'gl':
	        case 'it':
	        case 'nl':
	        case 'sv':
	        case 'sw':
	        case 'ur':
	        case 'yi':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            return Plural.Other;
	        case 'be':
	            if (n % 10 === 1 && !(n % 100 === 11))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                !(n % 100 >= 12 && n % 100 <= 14))
	                return Plural.Few;
	            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'br':
	            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                return Plural.One;
	            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                return Plural.Two;
	            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                    n % 100 >= 90 && n % 100 <= 99))
	                return Plural.Few;
	            if (!(n === 0) && n % 1e6 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'bs':
	        case 'hr':
	        case 'sr':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14) ||
	                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                    !(f % 100 >= 12 && f % 100 <= 14))
	                return Plural.Few;
	            return Plural.Other;
	        case 'cs':
	        case 'sk':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'cy':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === 3)
	                return Plural.Few;
	            if (n === 6)
	                return Plural.Many;
	            return Plural.Other;
	        case 'da':
	            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                return Plural.One;
	            return Plural.Other;
	        case 'dsb':
	        case 'hsb':
	            if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ff':
	        case 'fr':
	        case 'hy':
	        case 'kab':
	            if (i === 0 || i === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'fil':
	            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                return Plural.One;
	            return Plural.Other;
	        case 'ga':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            if (n === Math.floor(n) && n >= 3 && n <= 6)
	                return Plural.Few;
	            if (n === Math.floor(n) && n >= 7 && n <= 10)
	                return Plural.Many;
	            return Plural.Other;
	        case 'gd':
	            if (n === 1 || n === 11)
	                return Plural.One;
	            if (n === 2 || n === 12)
	                return Plural.Two;
	            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                return Plural.Few;
	            return Plural.Other;
	        case 'gv':
	            if (v === 0 && i % 10 === 1)
	                return Plural.One;
	            if (v === 0 && i % 10 === 2)
	                return Plural.Two;
	            if (v === 0 &&
	                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                return Plural.Few;
	            if (!(v === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'he':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (i === 2 && v === 0)
	                return Plural.Two;
	            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                return Plural.Many;
	            return Plural.Other;
	        case 'is':
	            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'ksh':
	            if (n === 0)
	                return Plural.Zero;
	            if (n === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'kw':
	        case 'naq':
	        case 'se':
	        case 'smn':
	            if (n === 1)
	                return Plural.One;
	            if (n === 2)
	                return Plural.Two;
	            return Plural.Other;
	        case 'lag':
	            if (n === 0)
	                return Plural.Zero;
	            if ((i === 0 || i === 1) && !(n === 0))
	                return Plural.One;
	            return Plural.Other;
	        case 'lt':
	            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.One;
	            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                !(n % 100 >= 11 && n % 100 <= 19))
	                return Plural.Few;
	            if (!(f === 0))
	                return Plural.Many;
	            return Plural.Other;
	        case 'lv':
	        case 'prg':
	            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                return Plural.Zero;
	            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                !(v === 2) && f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mk':
	            if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'mt':
	            if (n === 1)
	                return Plural.One;
	            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                return Plural.Few;
	            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pl':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'pt':
	            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                return Plural.One;
	            return Plural.Other;
	        case 'ro':
	            if (i === 1 && v === 0)
	                return Plural.One;
	            if (!(v === 0) || n === 0 ||
	                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                return Plural.Few;
	            return Plural.Other;
	        case 'ru':
	        case 'uk':
	            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                return Plural.One;
	            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                !(i % 100 >= 12 && i % 100 <= 14))
	                return Plural.Few;
	            if (v === 0 && i % 10 === 0 ||
	                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                return Plural.Many;
	            return Plural.Other;
	        case 'shi':
	            if (i === 0 || n === 1)
	                return Plural.One;
	            if (n === Math.floor(n) && n >= 2 && n <= 10)
	                return Plural.Few;
	            return Plural.Other;
	        case 'si':
	            if (n === 0 || n === 1 || i === 0 && f === 1)
	                return Plural.One;
	            return Plural.Other;
	        case 'sl':
	            if (v === 0 && i % 100 === 1)
	                return Plural.One;
	            if (v === 0 && i % 100 === 2)
	                return Plural.Two;
	            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                return Plural.Few;
	            return Plural.Other;
	        case 'tzm':
	            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                return Plural.One;
	            return Plural.Other;
	        default:
	            return Plural.Other;
	    }
	}
	//# sourceMappingURL=localization.js.map

/***/ },
/* 32 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { isPromise } from '../src/util/lang';
	import { Inject, Injectable, OpaqueToken, Optional } from './di';
	/**
	 * A function that will be executed when an application is initialized.
	 * @experimental
	 */
	export var APP_INITIALIZER = new OpaqueToken('Application Initializer');
	/**
	 * A class that reflects the state of running {@link APP_INITIALIZER}s.
	 *
	 * @experimental
	 */
	export var ApplicationInitStatus = (function () {
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this._done = false;
	        var asyncInitPromises = [];
	        if (appInits) {
	            for (var i = 0; i < appInits.length; i++) {
	                var initResult = appInits[i]();
	                if (isPromise(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	        if (asyncInitPromises.length === 0) {
	            this._done = true;
	        }
	    }
	    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	        get: function () { return this._done; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	        get: function () { return this._donePromise; },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationInitStatus.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    ApplicationInitStatus.ctorParameters = [
	        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	    ];
	    return ApplicationInitStatus;
	}());
	//# sourceMappingURL=application_init.js.map

/***/ },
/* 33 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { Injectable } from '../di';
	import { scheduleMicroTask } from '../facade/lang';
	import { NgZone } from '../zone/ng_zone';
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * @experimental
	 */
	export var Testability = (function () {
	    function Testability(_ngZone) {
	        this._ngZone = _ngZone;
	        /** @internal */
	        this._pendingCount = 0;
	        /** @internal */
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * @internal
	         */
	        this._didWork = false;
	        /** @internal */
	        this._callbacks = [];
	        this._watchAngularEvents();
	    }
	    /** @internal */
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    /** @internal */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    (_this._callbacks.pop())(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Not Ready
	            this._didWork = true;
	        }
	    };
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    /** @deprecated use findProviders */
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    Testability.ctorParameters = [
	        { type: NgZone, },
	    ];
	    return Testability;
	}());
	/**
	 * A global registry of {@link Testability} instances for specific elements.
	 * @experimental
	 */
	export var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /** @internal */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    TestabilityRegistry.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    TestabilityRegistry.ctorParameters = [];
	    return TestabilityRegistry;
	}());
	var _NoopGetTestability = (function () {
	    function _NoopGetTestability() {
	    }
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {@link GetTestability} implementation used by the Angular testing framework.
	 * @experimental
	 */
	export function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();
	//# sourceMappingURL=testability.js.map

/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { ErrorHandler } from '../src/error_handler';
	import { ListWrapper } from '../src/facade/collection';
	import { unimplemented } from '../src/facade/errors';
	import { stringify } from '../src/facade/lang';
	import { isPromise } from '../src/util/lang';
	import { ApplicationInitStatus } from './application_init';
	import { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';
	import { Console } from './console';
	import { Injectable, Injector, OpaqueToken, Optional, ReflectiveInjector } from './di';
	import { CompilerFactory } from './linker/compiler';
	import { ComponentFactory } from './linker/component_factory';
	import { ComponentFactoryResolver } from './linker/component_factory_resolver';
	import { wtfCreateScope, wtfLeave } from './profile/profile';
	import { Testability, TestabilityRegistry } from './testability/testability';
	import { NgZone } from './zone/ng_zone';
	var _devMode = true;
	var _runModeLocked = false;
	var _platform;
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 * @stable
	 */
	export function enableProdMode() {
	    if (_runModeLocked) {
	        throw new Error('Cannot enable prod mode after platform setup.');
	    }
	    _devMode = false;
	}
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function isDevMode() {
	    _runModeLocked = true;
	    return _devMode;
	}
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function createPlatform(injector) {
	    if (_platform && !_platform.destroyed) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function createPlatformFactory(parentPlaformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var marker = new OpaqueToken("Platform: " + name);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        if (!getPlatform()) {
	            if (parentPlaformFactory) {
	                parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform
	 * which contains the given token as a provider.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function assertPlatform(requiredToken) {
	    var platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Destroy the existing platform.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function destroyPlatform() {
	    if (_platform && !_platform.destroyed) {
	        _platform.destroy();
	    }
	}
	/**
	 * Returns the current platform.
	 *
	 * @experimental APIs related to application bootstrap are currently under review.
	 */
	export function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	 * explicitly by calling {@link createPlatform}().
	 *
	 * @stable
	 */
	export var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    /**
	     * Creates an instance of an `@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        throw unimplemented();
	    };
	    /**
	     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	     *
	     * ## Simple Example
	     *
	     * ```typescript
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     * @stable
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        throw unimplemented();
	    };
	    Object.defineProperty(PlatformRef.prototype, "injector", {
	        /**
	         * Retrieve the platform {@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         */
	        get: function () { throw unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(PlatformRef.prototype, "destroyed", {
	        get: function () { throw unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return PlatformRef;
	}());
	function _callAndReportToErrorHandler(errorHandler, callback) {
	    try {
	        var result = callback();
	        if (isPromise(result)) {
	            return result.catch(function (e) {
	                errorHandler.handleError(e);
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        errorHandler.handleError(e);
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	export var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    function PlatformRef_(_injector) {
	        _super.call(this);
	        this._injector = _injector;
	        this._modules = [];
	        this._destroyListeners = [];
	        this._destroyed = false;
	    }
	    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	        get: function () { return this._destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    PlatformRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	        return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	    };
	    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        if (!ngZone)
	            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	            var moduleRef = moduleFactory.create(ngZoneInjector);
	            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	            ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	            return _callAndReportToErrorHandler(exceptionHandler, function () {
	                var initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                return initStatus.donePromise.then(function () {
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	    };
	    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        var compilerFactory = this.injector.get(CompilerFactory);
	        var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	        // ugly internal api hack: generate host component factories for all declared components and
	        // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	        // factories.
	        if (componentFactoryCallback) {
	            return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                .then(function (_a) {
	                var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                componentFactoryCallback(componentFactories);
	                return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	            });
	        }
	        return compiler.compileModuleAsync(moduleType)
	            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	    };
	    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	        var appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef.bootstrapFactories.length > 0) {
	            moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                "Please define one of these.");
	        }
	    };
	    PlatformRef_.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    PlatformRef_.ctorParameters = [
	        { type: Injector, },
	    ];
	    return PlatformRef_;
	}(PlatformRef));
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {@link bootstrap}.
	 *
	 * @stable
	 */
	export var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	        /**
	         * Get a list of component types registered to this application.
	         * This list is populated even before the component is created.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ApplicationRef.prototype, "components", {
	        /**
	         * Get a list of components registered to this application.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ApplicationRef;
	}());
	export var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	        var _this = this;
	        _super.call(this);
	        this._zone = _zone;
	        this._console = _console;
	        this._injector = _injector;
	        this._exceptionHandler = _exceptionHandler;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._initStatus = _initStatus;
	        this._testabilityRegistry = _testabilityRegistry;
	        this._testability = _testability;
	        this._bootstrapListeners = [];
	        this._rootComponents = [];
	        this._rootComponentTypes = [];
	        this._changeDetectorRefs = [];
	        this._runningTick = false;
	        this._enforceNoNewChanges = false;
	        this._enforceNoNewChanges = isDevMode();
	        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	    }
	    ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
	        this._changeDetectorRefs.push(changeDetector);
	    };
	    ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
	        ListWrapper.remove(this._changeDetectorRefs, changeDetector);
	    };
	    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	        }
	        this._rootComponentTypes.push(componentFactory.componentType);
	        var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	        var testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        if (isDevMode()) {
	            this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /** @internal */
	    ApplicationRef_.prototype._loadComponent = function (componentRef) {
	        this._changeDetectorRefs.push(componentRef.changeDetectorRef);
	        this.tick();
	        this._rootComponents.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	            .concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    /** @internal */
	    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	        if (this._rootComponents.indexOf(componentRef) == -1) {
	            return;
	        }
	        this.unregisterChangeDetector(componentRef.changeDetectorRef);
	        ListWrapper.remove(this._rootComponents, componentRef);
	    };
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        var scope = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            wtfLeave(scope);
	        }
	    };
	    ApplicationRef_.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._rootComponents.slice().forEach(function (component) { return component.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "components", {
	        get: function () { return this._rootComponents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	    ApplicationRef_.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    ApplicationRef_.ctorParameters = [
	        { type: NgZone, },
	        { type: Console, },
	        { type: Injector, },
	        { type: ErrorHandler, },
	        { type: ComponentFactoryResolver, },
	        { type: ApplicationInitStatus, },
	        { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	        { type: Testability, decorators: [{ type: Optional },] },
	    ];
	    return ApplicationRef_;
	}(ApplicationRef));
	//# sourceMappingURL=application_ref.js.map

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { OpaqueToken } from '../di';
	import { BaseError } from '../facade/errors';
	import { stringify } from '../facade/lang';
	/**
	 * Indicates that a component is still being loaded in a synchronous compile.
	 *
	 * @stable
	 */
	export var ComponentStillLoadingError = (function (_super) {
	    __extends(ComponentStillLoadingError, _super);
	    function ComponentStillLoadingError(compType) {
	        _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	        this.compType = compType;
	    }
	    return ComponentStillLoadingError;
	}(BaseError));
	/**
	 * Combination of NgModuleFactory and ComponentFactorys.
	 *
	 * @experimental
	 */
	export var ModuleWithComponentFactories = (function () {
	    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	        this.ngModuleFactory = ngModuleFactory;
	        this.componentFactories = componentFactories;
	    }
	    return ModuleWithComponentFactories;
	}());
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 * @stable
	 */
	export var Compiler = (function () {
	    function Compiler() {
	    }
	    /**
	     * Compiles the given NgModule and all of its components. All templates of the components listed
	     * in `entryComponents`
	     * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
	     */
	    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	    /**
	     * Compiles the given NgModule and all of its components
	     */
	    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	    /**
	     * Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
	     */
	    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
	     */
	    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        throw _throwError();
	    };
	    /**
	     * Clears all caches.
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    return Compiler;
	}());
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * @experimental
	 */
	export var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * @experimental
	 */
	export var CompilerFactory = (function () {
	    function CompilerFactory() {
	    }
	    return CompilerFactory;
	}());
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Inject, Injectable, OpaqueToken } from '@angular/core';
	import { EventManagerPlugin } from './event_manager';
	var EVENT_NAMES = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	/**
	 * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	 * Hammer gestures.
	 *
	 * @experimental
	 */
	export var HAMMER_GESTURE_CONFIG = new OpaqueToken('HammerGestureConfig');
	/**
	 * @experimental
	 */
	export var HammerGestureConfig = (function () {
	    function HammerGestureConfig() {
	        this.events = [];
	        this.overrides = {};
	    }
	    HammerGestureConfig.prototype.buildHammer = function (element) {
	        var mc = new Hammer(element);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        for (var eventName in this.overrides) {
	            mc.get(eventName).set(this.overrides[eventName]);
	        }
	        return mc;
	    };
	    HammerGestureConfig.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    HammerGestureConfig.ctorParameters = [];
	    return HammerGestureConfig;
	}());
	export var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin(_config) {
	        _super.call(this);
	        this._config = _config;
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	            return false;
	        }
	        if (!window.Hammer) {
	            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = _this._config.buildHammer(element);
	            var callback = function (eventObj) {
	                zone.runGuarded(function () { handler(eventObj); });
	            };
	            mc.on(eventName, callback);
	            return function () { return mc.off(eventName, callback); };
	        });
	    };
	    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	    HammerGesturesPlugin.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    HammerGesturesPlugin.ctorParameters = [
	        { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	    ];
	    return HammerGesturesPlugin;
	}(EventManagerPlugin));
	//# sourceMappingURL=hammer_gestures.js.map

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { Inject, Injectable, NgZone, OpaqueToken } from '@angular/core';
	import { getDOM } from '../dom_adapter';
	/**
	 * @stable
	 */
	export var EVENT_MANAGER_PLUGINS = new OpaqueToken('EventManagerPlugins');
	/**
	 * @stable
	 */
	export var EventManager = (function () {
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        this._eventNameToPlugin = new Map();
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /** @internal */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugin = this._eventNameToPlugin.get(eventName);
	        if (plugin) {
	            return plugin;
	        }
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin_1 = plugins[i];
	            if (plugin_1.supports(eventName)) {
	                this._eventNameToPlugin.set(eventName, plugin_1);
	                return plugin_1;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    EventManager.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    EventManager.ctorParameters = [
	        { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	        { type: NgZone, },
	    ];
	    return EventManager;
	}());
	export var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {
	    }
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        var target = getDOM().getGlobalEventTarget(element);
	        if (!target) {
	            throw new Error("Unsupported event target " + target + " for event " + eventName);
	        }
	        return this.addEventListener(target, eventName, handler);
	    };
	    ;
	    return EventManagerPlugin;
	}());
	//# sourceMappingURL=event_manager.js.map

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Inject, Injectable } from '@angular/core';
	import { DOCUMENT } from './dom_tokens';
	export var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /** @internal */
	        this._styles = [];
	        /** @internal */
	        this._stylesSet = new Set();
	    }
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var additions = [];
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                _this._styles.push(style);
	                additions.push(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	    SharedStylesHost.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    SharedStylesHost.ctorParameters = [];
	    return SharedStylesHost;
	}());
	export var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    function DomSharedStylesHost(doc) {
	        _super.call(this);
	        this._hostNodes = new Set();
	        this._hostNodes.add(doc.head);
	    }
	    /** @internal */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        for (var i = 0; i < styles.length; i++) {
	            var styleEl = document.createElement('style');
	            styleEl.textContent = styles[i];
	            host.appendChild(styleEl);
	        }
	    };
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._styles, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	    };
	    DomSharedStylesHost.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    DomSharedStylesHost.ctorParameters = [
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
	    ];
	    return DomSharedStylesHost;
	}(SharedStylesHost));
	//# sourceMappingURL=shared_styles_host.js.map

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { APP_ID, Inject, Injectable, ViewEncapsulation } from '@angular/core';
	import { isPresent, stringify } from '../facade/lang';
	import { AnimationDriver } from './animation_driver';
	import { DOCUMENT } from './dom_tokens';
	import { EventManager } from './events/event_manager';
	import { DomSharedStylesHost } from './shared_styles_host';
	export var NAMESPACE_URIS = {
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml'
	};
	var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	export var DomRootRenderer = (function () {
	    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
	        this.document = document;
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.animationDriver = animationDriver;
	        this.appId = appId;
	        this.registeredComponents = new Map();
	    }
	    DomRootRenderer.prototype.renderComponent = function (componentProto) {
	        var renderer = this.registeredComponents.get(componentProto.id);
	        if (!renderer) {
	            renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
	            this.registeredComponents.set(componentProto.id, renderer);
	        }
	        return renderer;
	    };
	    return DomRootRenderer;
	}());
	export var DomRootRenderer_ = (function (_super) {
	    __extends(DomRootRenderer_, _super);
	    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
	        _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
	    }
	    DomRootRenderer_.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    DomRootRenderer_.ctorParameters = [
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
	        { type: EventManager, },
	        { type: DomSharedStylesHost, },
	        { type: AnimationDriver, },
	        { type: undefined, decorators: [{ type: Inject, args: [APP_ID,] },] },
	    ];
	    return DomRootRenderer_;
	}(DomRootRenderer));
	export var DIRECT_DOM_RENDERER = {
	    remove: function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	    },
	    appendChild: function (node, parent) { parent.appendChild(node); },
	    insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
	    nextSibling: function (node) { return node.nextSibling; },
	    parentElement: function (node) { return node.parentNode; }
	};
	export var DomRenderer = (function () {
	    function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
	        this._rootRenderer = _rootRenderer;
	        this.componentProto = componentProto;
	        this._animationDriver = _animationDriver;
	        this.directRenderer = DIRECT_DOM_RENDERER;
	        this._styles = flattenStyles(styleShimId, componentProto.styles, []);
	        if (componentProto.encapsulation !== ViewEncapsulation.Native) {
	            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	        }
	        if (this.componentProto.encapsulation === ViewEncapsulation.Emulated) {
	            this._contentAttr = shimContentAttribute(styleShimId);
	            this._hostAttr = shimHostAttribute(styleShimId);
	        }
	        else {
	            this._contentAttr = null;
	            this._hostAttr = null;
	        }
	    }
	    DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	        var el;
	        if (typeof selectorOrNode === 'string') {
	            el = this._rootRenderer.document.querySelector(selectorOrNode);
	            if (!el) {
	                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	            }
	        }
	        else {
	            el = selectorOrNode;
	        }
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	        return el;
	    };
	    DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	        var el;
	        if (isNamespaced(name)) {
	            var nsAndName = splitNamespace(name);
	            el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
	        }
	        else {
	            el = document.createElement(name);
	        }
	        if (this._contentAttr) {
	            el.setAttribute(this._contentAttr, '');
	        }
	        if (parent) {
	            parent.appendChild(el);
	        }
	        return el;
	    };
	    DomRenderer.prototype.createViewRoot = function (hostElement) {
	        var nodesParent;
	        if (this.componentProto.encapsulation === ViewEncapsulation.Native) {
	            nodesParent = hostElement.createShadowRoot();
	            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	            for (var i = 0; i < this._styles.length; i++) {
	                var styleEl = document.createElement('style');
	                styleEl.textContent = this._styles[i];
	                nodesParent.appendChild(styleEl);
	            }
	        }
	        else {
	            if (this._hostAttr) {
	                hostElement.setAttribute(this._hostAttr, '');
	            }
	            nodesParent = hostElement;
	        }
	        return nodesParent;
	    };
	    DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	        var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
	        if (parentElement) {
	            parentElement.appendChild(comment);
	        }
	        return comment;
	    };
	    DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	        var node = document.createTextNode(value);
	        if (parentElement) {
	            parentElement.appendChild(node);
	        }
	        return node;
	    };
	    DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	        if (!parentElement)
	            return;
	        appendNodes(parentElement, nodes);
	    };
	    DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	    DomRenderer.prototype.detachView = function (viewRootNodes) {
	        for (var i = 0; i < viewRootNodes.length; i++) {
	            var node = viewRootNodes[i];
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	        }
	    };
	    DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	        if (this.componentProto.encapsulation === ViewEncapsulation.Native && hostElement) {
	            this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);
	        }
	    };
	    DomRenderer.prototype.listen = function (renderElement, name, callback) {
	        return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	        return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        renderElement[propertyName] = propertyValue;
	    };
	    DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	        var attrNs;
	        var attrNameWithoutNs = attributeName;
	        if (isNamespaced(attributeName)) {
	            var nsAndName = splitNamespace(attributeName);
	            attrNameWithoutNs = nsAndName[1];
	            attributeName = nsAndName[0] + ':' + nsAndName[1];
	            attrNs = NAMESPACE_URIS[nsAndName[0]];
	        }
	        if (isPresent(attributeValue)) {
	            if (attrNs) {
	                renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
	            }
	            else {
	                renderElement.setAttribute(attributeName, attributeValue);
	            }
	        }
	        else {
	            if (isPresent(attrNs)) {
	                renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
	            }
	            else {
	                renderElement.removeAttribute(attributeName);
	            }
	        }
	    };
	    DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	        if (renderElement.nodeType === Node.COMMENT_NODE) {
	            var existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
	            var parsedBindings = JSON.parse(existingBindings[1]);
	            parsedBindings[propertyName] = propertyValue;
	            renderElement.nodeValue =
	                TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
	        }
	        else {
	            this.setElementAttribute(renderElement, propertyName, propertyValue);
	        }
	    };
	    DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            renderElement.classList.add(className);
	        }
	        else {
	            renderElement.classList.remove(className);
	        }
	    };
	    DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (isPresent(styleValue)) {
	            renderElement.style[styleName] = stringify(styleValue);
	        }
	        else {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            renderElement.style[styleName] = '';
	        }
	    };
	    DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        renderElement[methodName].apply(renderElement, args);
	    };
	    DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
	    DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	        if (previousPlayers === void 0) { previousPlayers = []; }
	        return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	    };
	    return DomRenderer;
	}());
	function moveNodesAfterSibling(sibling, nodes) {
	    var parent = sibling.parentNode;
	    if (nodes.length > 0 && parent) {
	        var nextSibling = sibling.nextSibling;
	        if (nextSibling) {
	            for (var i = 0; i < nodes.length; i++) {
	                parent.insertBefore(nodes[i], nextSibling);
	            }
	        }
	        else {
	            for (var i = 0; i < nodes.length; i++) {
	                parent.appendChild(nodes[i]);
	            }
	        }
	    }
	}
	function appendNodes(parent, nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	        parent.appendChild(nodes[i]);
	    }
	}
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            event.preventDefault();
	            event.returnValue = false;
	        }
	    };
	}
	var COMPONENT_REGEX = /%COMP%/g;
	export var COMPONENT_VARIABLE = '%COMP%';
	export var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	export var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	export function shimContentAttribute(componentShortId) {
	    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	export function shimHostAttribute(componentShortId) {
	    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	}
	export function flattenStyles(compId, styles, target) {
	    for (var i = 0; i < styles.length; i++) {
	        var style = styles[i];
	        if (Array.isArray(style)) {
	            flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	export function isNamespaced(name) {
	    return name[0] === ':';
	}
	export function splitNamespace(name) {
	    var match = name.match(NS_PREFIX_RE);
	    return [match[1], match[2]];
	}
	//# sourceMappingURL=dom_renderer.js.map

/***/ },
/* 40 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Injectable, SecurityContext } from '@angular/core';
	import { sanitizeHtml } from './html_sanitizer';
	import { sanitizeStyle } from './style_sanitizer';
	import { sanitizeUrl } from './url_sanitizer';
	export { SecurityContext };
	/**
	 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	 * values to be safe to use in the different DOM contexts.
	 *
	 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	 * the website.
	 *
	 * In specific situations, it might be necessary to disable sanitization, for example if the
	 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	 * methods, and then binding to that value from the template.
	 *
	 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	 * Cross Site Scripting (XSS) security bug!
	 *
	 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	 * close as possible to the source of the value, to make it easy to verify no security bug is
	 * created by its use.
	 *
	 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	 * code. The sanitizer leaves safe values intact.
	 *
	 * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	 * sanitization for the value passed in. Carefully check and audit all values and code paths going
	 * into this call. Make sure any user data is appropriately escaped for this security context.
	 * For more detail, see the [Security Guide](http://g.co/ng/security).
	 *
	 * @stable
	 */
	export var DomSanitizer = (function () {
	    function DomSanitizer() {
	    }
	    return DomSanitizer;
	}());
	export var DomSanitizerImpl = (function (_super) {
	    __extends(DomSanitizerImpl, _super);
	    function DomSanitizerImpl() {
	        _super.apply(this, arguments);
	    }
	    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	        if (value == null)
	            return null;
	        switch (ctx) {
	            case SecurityContext.NONE:
	                return value;
	            case SecurityContext.HTML:
	                if (value instanceof SafeHtmlImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'HTML');
	                return sanitizeHtml(String(value));
	            case SecurityContext.STYLE:
	                if (value instanceof SafeStyleImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Style');
	                return sanitizeStyle(value);
	            case SecurityContext.SCRIPT:
	                if (value instanceof SafeScriptImpl)
	                    return value.changingThisBreaksApplicationSecurity;
	                this.checkNotSafeValue(value, 'Script');
	                throw new Error('unsafe value used in a script context');
	            case SecurityContext.URL:
	                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                    // Allow resource URLs in URL contexts, they are strictly more trusted.
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'URL');
	                return sanitizeUrl(String(value));
	            case SecurityContext.RESOURCE_URL:
	                if (value instanceof SafeResourceUrlImpl) {
	                    return value.changingThisBreaksApplicationSecurity;
	                }
	                this.checkNotSafeValue(value, 'ResourceURL');
	                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	            default:
	                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	        }
	    };
	    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	        if (value instanceof SafeValueImpl) {
	            throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                "(see http://g.co/ng/security#xss)");
	        }
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	        return new SafeResourceUrlImpl(value);
	    };
	    DomSanitizerImpl.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    DomSanitizerImpl.ctorParameters = [];
	    return DomSanitizerImpl;
	}(DomSanitizer));
	var SafeValueImpl = (function () {
	    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	        // empty
	    }
	    SafeValueImpl.prototype.toString = function () {
	        return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	            " (see http://g.co/ng/security#xss)";
	    };
	    return SafeValueImpl;
	}());
	var SafeHtmlImpl = (function (_super) {
	    __extends(SafeHtmlImpl, _super);
	    function SafeHtmlImpl() {
	        _super.apply(this, arguments);
	    }
	    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	    return SafeHtmlImpl;
	}(SafeValueImpl));
	var SafeStyleImpl = (function (_super) {
	    __extends(SafeStyleImpl, _super);
	    function SafeStyleImpl() {
	        _super.apply(this, arguments);
	    }
	    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	    return SafeStyleImpl;
	}(SafeValueImpl));
	var SafeScriptImpl = (function (_super) {
	    __extends(SafeScriptImpl, _super);
	    function SafeScriptImpl() {
	        _super.apply(this, arguments);
	    }
	    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	    return SafeScriptImpl;
	}(SafeValueImpl));
	var SafeUrlImpl = (function (_super) {
	    __extends(SafeUrlImpl, _super);
	    function SafeUrlImpl() {
	        _super.apply(this, arguments);
	    }
	    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	    return SafeUrlImpl;
	}(SafeValueImpl));
	var SafeResourceUrlImpl = (function (_super) {
	    __extends(SafeResourceUrlImpl, _super);
	    function SafeResourceUrlImpl() {
	        _super.apply(this, arguments);
	    }
	    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	    return SafeResourceUrlImpl;
	}(SafeValueImpl));
	//# sourceMappingURL=dom_sanitization_service.js.map

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { getDOM } from '../dom/dom_adapter';
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 *
	 * @experimental
	 */
	export var Title = (function () {
	    function Title() {
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @returns {string}
	     */
	    Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	    /**
	     * Set the title of the current HTML document.
	     * @param newTitle
	     */
	    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	    return Title;
	}());
	//# sourceMappingURL=title.js.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview This file is generated by the Angular 2 template compiler.
	 * Do not edit.
	 * @suppress {suspiciousCode,uselessCode,missingProperties}
	 */
	/* tslint:disable */
	"use strict";
	
	var __extends = undefined && undefined.__extends || function (d, b) {
	    for (var p in b) {
	        if (b.hasOwnProperty(p)) d[p] = b[p];
	    }function __() {
	        this.constructor = d;
	    }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var import0 = __webpack_require__(27);
	var import1 = __webpack_require__(43);
	var import3 = __webpack_require__(24);
	var import4 = __webpack_require__(44);
	var import5 = __webpack_require__(45);
	var import6 = __webpack_require__(46);
	var import7 = __webpack_require__(47);
	var Wrapper_AppComponent = function () {
	    function Wrapper_AppComponent() {
	        this._changed = false;
	        this.context = new import0.AppComponent();
	    }
	    Wrapper_AppComponent.prototype.ngOnDetach = function (view, componentView, el) {};
	    Wrapper_AppComponent.prototype.ngOnDestroy = function () {};
	    Wrapper_AppComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
	        var changed = this._changed;
	        this._changed = false;
	        return changed;
	    };
	    Wrapper_AppComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {};
	    Wrapper_AppComponent.prototype.handleEvent = function (eventName, $event) {
	        var result = true;
	        return result;
	    };
	    Wrapper_AppComponent.prototype.subscribe = function (view, _eventHandler) {
	        this._eventHandler = _eventHandler;
	    };
	    return Wrapper_AppComponent;
	}();
	exports.Wrapper_AppComponent = Wrapper_AppComponent;
	var renderType_AppComponent_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
	var View_AppComponent_Host0 = function (_super) {
	    __extends(View_AppComponent_Host0, _super);
	    function View_AppComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
	        _super.call(this, View_AppComponent_Host0, renderType_AppComponent_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
	    }
	    View_AppComponent_Host0.prototype.createInternal = function (rootSelector) {
	        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'my-app', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
	        this.compView_0 = new View_AppComponent0(this.viewUtils, this, 0, this._el_0);
	        this._AppComponent_0_3 = new Wrapper_AppComponent();
	        this.compView_0.create(this._AppComponent_0_3.context);
	        this.init(this._el_0, this.renderer.directRenderer ? null : [this._el_0], null);
	        return new import7.ComponentRef_(0, this, this._el_0, this._AppComponent_0_3.context);
	    };
	    View_AppComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
	        if (token === import0.AppComponent && 0 === requestNodeIndex) {
	            return this._AppComponent_0_3.context;
	        }
	        return notFoundResult;
	    };
	    View_AppComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
	        this._AppComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
	        this.compView_0.detectChanges(throwOnChange);
	    };
	    View_AppComponent_Host0.prototype.destroyInternal = function () {
	        this.compView_0.destroy();
	    };
	    View_AppComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
	        cb(this._el_0, ctx);
	    };
	    return View_AppComponent_Host0;
	}(import1.AppView);
	exports.AppComponentNgFactory = new import7.ComponentFactory('my-app', View_AppComponent_Host0, import0.AppComponent);
	var styles_AppComponent = [];
	var renderType_AppComponent = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, styles_AppComponent, {});
	var View_AppComponent0 = function (_super) {
	    __extends(View_AppComponent0, _super);
	    function View_AppComponent0(viewUtils, parentView, parentIndex, parentElement) {
	        _super.call(this, View_AppComponent0, renderType_AppComponent, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways);
	        this._expr_4 = import6.UNINITIALIZED;
	    }
	    View_AppComponent0.prototype.createInternal = function (rootSelector) {
	        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
	        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
	        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'h1', import3.EMPTY_INLINE_ARRAY, null);
	        this._text_2 = this.renderer.createText(this._el_1, '', null);
	        this._text_3 = this.renderer.createText(parentRenderNode, '\n  ', null);
	        this.init(null, this.renderer.directRenderer ? null : [this._text_0, this._el_1, this._text_2, this._text_3], null);
	        return null;
	    };
	    View_AppComponent0.prototype.detectChangesInternal = function (throwOnChange) {
	        var currVal_4 = import3.inlineInterpolate(1, 'Hello ', this.context.name, '');
	        if (import3.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
	            this.renderer.setText(this._text_2, currVal_4);
	            this._expr_4 = currVal_4;
	        }
	    };
	    return View_AppComponent0;
	}(import1.AppView);
	exports.View_AppComponent0 = View_AppComponent0;

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { ChangeDetectorStatus } from '../change_detection/change_detection';
	import { THROW_IF_NOT_FOUND } from '../di/injector';
	import { isPresent } from '../facade/lang';
	import { wtfCreateScope, wtfLeave } from '../profile/profile';
	import { AnimationViewContext } from './animation_view_context';
	import { DebugContext } from './debug_context';
	import { ElementInjector } from './element_injector';
	import { ExpressionChangedAfterItHasBeenCheckedError, ViewDestroyedError, ViewWrappedError } from './errors';
	import { ViewRef_ } from './view_ref';
	import { ViewType } from './view_type';
	import { addToArray } from './view_utils';
	var _scope_check = wtfCreateScope("AppView#check(ascii id)");
	/**
	 * @experimental
	 */
	var EMPTY_CONTEXT = new Object();
	var UNDEFINED = new Object();
	/**
	 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	export var AppView = (function () {
	    function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
	        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	        this.clazz = clazz;
	        this.componentType = componentType;
	        this.type = type;
	        this.viewUtils = viewUtils;
	        this.parentView = parentView;
	        this.parentIndex = parentIndex;
	        this.parentElement = parentElement;
	        this.cdMode = cdMode;
	        this.declaredViewContainer = declaredViewContainer;
	        this.viewContainer = null;
	        this.numberOfChecks = 0;
	        this.ref = new ViewRef_(this);
	        if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	            this.renderer = viewUtils.renderComponent(componentType);
	        }
	        else {
	            this.renderer = parentView.renderer;
	        }
	        this._directRenderer = this.renderer.directRenderer;
	    }
	    Object.defineProperty(AppView.prototype, "animationContext", {
	        get: function () {
	            if (!this._animationContext) {
	                this._animationContext = new AnimationViewContext();
	            }
	            return this._animationContext;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppView.prototype, "destroyed", {
	        get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    AppView.prototype.create = function (context) {
	        this.context = context;
	        return this.createInternal(null);
	    };
	    AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
	        this.context = EMPTY_CONTEXT;
	        this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	        this._hostInjector = hostInjector;
	        this._hostProjectableNodes = projectableNodes;
	        return this.createInternal(rootSelectorOrNode);
	    };
	    /**
	     * Overwritten by implementations.
	     * Returns the ComponentRef for the host element for ViewType.HOST.
	     */
	    AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	    /**
	     * Overwritten by implementations.
	     */
	    AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
	    AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
	        this.lastRootNode = lastRootNode;
	        this.allNodes = allNodes;
	        this.disposables = disposables;
	        if (this.type === ViewType.COMPONENT) {
	            this.dirtyParentQueriesInternal();
	        }
	    };
	    AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        var result = UNDEFINED;
	        var view = this;
	        while (result === UNDEFINED) {
	            if (isPresent(nodeIndex)) {
	                result = view.injectorGetInternal(token, nodeIndex, UNDEFINED);
	            }
	            if (result === UNDEFINED && view.type === ViewType.HOST) {
	                result = view._hostInjector.get(token, notFoundValue);
	            }
	            nodeIndex = view.parentIndex;
	            view = view.parentView;
	        }
	        return result;
	    };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	        return notFoundResult;
	    };
	    AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
	    AppView.prototype.detachAndDestroy = function () {
	        if (this._hasExternalHostElement) {
	            this.detach();
	        }
	        else if (isPresent(this.viewContainer)) {
	            this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
	        }
	        this.destroy();
	    };
	    AppView.prototype.destroy = function () {
	        var _this = this;
	        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	            return;
	        }
	        var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
	        if (this.disposables) {
	            for (var i = 0; i < this.disposables.length; i++) {
	                this.disposables[i]();
	            }
	        }
	        this.destroyInternal();
	        this.dirtyParentQueriesInternal();
	        if (this._animationContext) {
	            this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
	        }
	        else {
	            this.renderer.destroyView(hostElement, this.allNodes);
	        }
	        this.cdMode = ChangeDetectorStatus.Destroyed;
	    };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.destroyInternal = function () { };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.detachInternal = function () { };
	    AppView.prototype.detach = function () {
	        var _this = this;
	        this.detachInternal();
	        if (this._animationContext) {
	            this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
	        }
	        else {
	            this._renderDetach();
	        }
	        if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer) {
	            var projectedViews = this.declaredViewContainer.projectedViews;
	            var index = projectedViews.indexOf(this);
	            // perf: pop is faster than splice!
	            if (index >= projectedViews.length - 1) {
	                projectedViews.pop();
	            }
	            else {
	                projectedViews.splice(index, 1);
	            }
	        }
	        this.viewContainer = null;
	        this.dirtyParentQueriesInternal();
	    };
	    AppView.prototype._renderDetach = function () {
	        if (this._directRenderer) {
	            this.visitRootNodesInternal(this._directRenderer.remove, null);
	        }
	        else {
	            this.renderer.detachView(this.flatRootNodes);
	        }
	    };
	    AppView.prototype.attachAfter = function (viewContainer, prevView) {
	        this._renderAttach(viewContainer, prevView);
	        this.viewContainer = viewContainer;
	        if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
	            if (!this.declaredViewContainer.projectedViews) {
	                this.declaredViewContainer.projectedViews = [];
	            }
	            this.declaredViewContainer.projectedViews.push(this);
	        }
	        this.dirtyParentQueriesInternal();
	    };
	    AppView.prototype.moveAfter = function (viewContainer, prevView) {
	        this._renderAttach(viewContainer, prevView);
	        this.dirtyParentQueriesInternal();
	    };
	    AppView.prototype._renderAttach = function (viewContainer, prevView) {
	        var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
	        if (this._directRenderer) {
	            var nextSibling = this._directRenderer.nextSibling(prevNode);
	            if (nextSibling) {
	                this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
	            }
	            else {
	                var parentElement = this._directRenderer.parentElement(prevNode);
	                if (parentElement) {
	                    this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
	                }
	            }
	        }
	        else {
	            this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
	        }
	    };
	    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	        get: function () { return this.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppView.prototype, "flatRootNodes", {
	        get: function () {
	            var nodes = [];
	            this.visitRootNodesInternal(addToArray, nodes);
	            return nodes;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
	        if (this._directRenderer) {
	            this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
	        }
	        else {
	            var nodes = [];
	            this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
	            this.renderer.projectNodes(parentElement, nodes);
	        }
	    };
	    AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
	        switch (this.type) {
	            case ViewType.EMBEDDED:
	                this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
	                break;
	            case ViewType.COMPONENT:
	                if (this.parentView.type === ViewType.HOST) {
	                    var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
	                    for (var i = 0; i < nodes.length; i++) {
	                        cb(nodes[i], c);
	                    }
	                }
	                else {
	                    this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
	                }
	                break;
	        }
	    };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.visitRootNodesInternal = function (cb, c) { };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.dirtyParentQueriesInternal = function () { };
	    AppView.prototype.detectChanges = function (throwOnChange) {
	        var s = _scope_check(this.clazz);
	        if (this.cdMode === ChangeDetectorStatus.Checked ||
	            this.cdMode === ChangeDetectorStatus.Errored ||
	            this.cdMode === ChangeDetectorStatus.Detached)
	            return;
	        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	            this.throwDestroyedError('detectChanges');
	        }
	        this.detectChangesInternal(throwOnChange);
	        if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	            this.cdMode = ChangeDetectorStatus.Checked;
	        this.numberOfChecks++;
	        wtfLeave(s);
	    };
	    /**
	     * Overwritten by implementations
	     */
	    AppView.prototype.detectChangesInternal = function (throwOnChange) { };
	    AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	    AppView.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	            if (c.cdMode === ChangeDetectorStatus.Checked) {
	                c.cdMode = ChangeDetectorStatus.CheckOnce;
	            }
	            if (c.type === ViewType.COMPONENT) {
	                c = c.parentView;
	            }
	            else {
	                c = c.viewContainer ? c.viewContainer.parentView : null;
	            }
	        }
	    };
	    AppView.prototype.eventHandler = function (cb) {
	        return cb;
	    };
	    AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	    return AppView;
	}());
	export var DebugAppView = (function (_super) {
	    __extends(DebugAppView, _super);
	    function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
	        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	        _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
	        this.staticNodeDebugInfos = staticNodeDebugInfos;
	        this._currentDebugContext = null;
	    }
	    DebugAppView.prototype.create = function (context) {
	        this._resetDebug();
	        try {
	            return _super.prototype.create.call(this, context);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        this._resetDebug();
	        try {
	            return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	        this._resetDebug();
	        try {
	            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype.detach = function () {
	        this._resetDebug();
	        try {
	            _super.prototype.detach.call(this);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype.destroy = function () {
	        this._resetDebug();
	        try {
	            _super.prototype.destroy.call(this);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype.detectChanges = function (throwOnChange) {
	        this._resetDebug();
	        try {
	            _super.prototype.detectChanges.call(this, throwOnChange);
	        }
	        catch (e) {
	            this._rethrowWithContext(e);
	            throw e;
	        }
	    };
	    DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	    DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	        return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	    };
	    DebugAppView.prototype._rethrowWithContext = function (e) {
	        if (!(e instanceof ViewWrappedError)) {
	            if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                this.cdMode = ChangeDetectorStatus.Errored;
	            }
	            if (isPresent(this._currentDebugContext)) {
	                throw new ViewWrappedError(e, this._currentDebugContext);
	            }
	        }
	    };
	    DebugAppView.prototype.eventHandler = function (cb) {
	        var _this = this;
	        var superHandler = _super.prototype.eventHandler.call(this, cb);
	        return function (eventName, event) {
	            _this._resetDebug();
	            try {
	                return superHandler.call(_this, eventName, event);
	            }
	            catch (e) {
	                _this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	    };
	    return DebugAppView;
	}(AppView));
	//# sourceMappingURL=view.js.map

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines template and style encapsulation options available for Component's {@link Component}.
	 *
	 * See {@link ViewMetadata#encapsulation}.
	 * @stable
	 */
	export var ViewEncapsulation;
	(function (ViewEncapsulation) {
	    /**
	     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	     * Element and pre-processing the style rules provided via
	     * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
	     * attribute to all selectors.
	     *
	     * This is the default option.
	     */
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    /**
	     * Use the native encapsulation mechanism of the renderer.
	     *
	     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    /**
	     * Don't provide any template or style encapsulation.
	     */
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	})(ViewEncapsulation || (ViewEncapsulation = {}));
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * For details on the `@Component` annotation, see {@link Component}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @deprecated Use Component instead.
	 *
	 * {@link Component}
	 */
	export var ViewMetadata = (function () {
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.encapsulation = encapsulation;
	        this.animations = animations;
	        this.interpolation = interpolation;
	    }
	    return ViewMetadata;
	}());
	//# sourceMappingURL=view.js.map

/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	export var ViewType;
	(function (ViewType) {
	    // A view that contains the host element with bound component directive.
	    // Contains a COMPONENT view
	    ViewType[ViewType["HOST"] = 0] = "HOST";
	    // The view of the component
	    // Can contain 0 to n EMBEDDED views
	    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	    // A view that is embedded into another View via a <template> element
	    // inside of a COMPONENT view
	    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	})(ViewType || (ViewType = {}));
	//# sourceMappingURL=view_type.js.map

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { DefaultIterableDifferFactory } from './differs/default_iterable_differ';
	import { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';
	import { IterableDiffers } from './differs/iterable_differs';
	import { KeyValueDiffers } from './differs/keyvalue_differs';
	export { SimpleChange, UNINITIALIZED, ValueUnwrapper, WrappedValue, devModeEqual, looseIdentical } from './change_detection_util';
	export { ChangeDetectorRef } from './change_detector_ref';
	export { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';
	export { CollectionChangeRecord, DefaultIterableDifferFactory } from './differs/default_iterable_differ';
	export { DefaultIterableDiffer } from './differs/default_iterable_differ';
	export { DefaultKeyValueDifferFactory, KeyValueChangeRecord } from './differs/default_keyvalue_differ';
	export { IterableDiffers } from './differs/iterable_differs';
	export { KeyValueDiffers } from './differs/keyvalue_differs';
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	export var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	export var iterableDiff = [new DefaultIterableDifferFactory()];
	export var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	export var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { unimplemented } from '../facade/errors';
	import { ElementRef } from './element_ref';
	import { ViewUtils } from './view_utils';
	/**
	 * Represents an instance of a Component created via a {@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	 * method.
	 * @stable
	 */
	export var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    Object.defineProperty(ComponentRef.prototype, "location", {
	        /**
	         * Location of the Host Element of this Component Instance.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef.prototype, "injector", {
	        /**
	         * The injector on which the component instance exists.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef.prototype, "instance", {
	        /**
	         * The instance of the Component.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        /**
	         * The {@link ViewRef} of the Host View of this Component instance.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
	        /**
	         * The {@link ChangeDetectorRef} of the Component instance.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef.prototype, "componentType", {
	        /**
	         * The component type.
	         */
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	}());
	export var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    function ComponentRef_(_index, _parentView, _nativeElement, _component) {
	        _super.call(this);
	        this._index = _index;
	        this._parentView = _parentView;
	        this._nativeElement = _nativeElement;
	        this._component = _component;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        get: function () { return new ElementRef(this._nativeElement); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        get: function () { return this._parentView.injector(this._index); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "instance", {
	        get: function () { return this._component; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentRef_.prototype, "hostView", {
	        get: function () { return this._parentView.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	        get: function () { return this._parentView.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        get: function () { return this._component.constructor; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
	    ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	    return ComponentRef_;
	}(ComponentRef));
	/**
	 * @experimental
	 */
	var EMPTY_CONTEXT = new Object();
	/**
	 * @stable
	 */
	export var ComponentFactory = (function () {
	    function ComponentFactory(selector, _viewClass, _componentType) {
	        this.selector = selector;
	        this._viewClass = _viewClass;
	        this._componentType = _componentType;
	    }
	    Object.defineProperty(ComponentFactory.prototype, "componentType", {
	        get: function () { return this._componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     */
	    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	        var vu = injector.get(ViewUtils);
	        if (!projectableNodes) {
	            projectableNodes = [];
	        }
	        var hostView = new this._viewClass(vu, null, null, null);
	        return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
	    };
	    return ComponentFactory;
	}());
	//# sourceMappingURL=component_factory.js.map

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { OpaqueToken } from './di';
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	 * using this token.
	 * @experimental
	 */
	export var APP_ID = new OpaqueToken('AppId');
	export function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * @experimental
	 */
	export var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * @experimental
	 */
	export var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * @experimental
	 */
	export var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * @experimental
	 */
	export var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
	//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Injectable } from '@angular/core';
	import { EventManagerPlugin } from './event_manager';
	export var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        element.addEventListener(eventName, handler, false);
	        return function () { return element.removeEventListener(eventName, handler, false); };
	    };
	    DomEventsPlugin.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    DomEventsPlugin.ctorParameters = [];
	    return DomEventsPlugin;
	}(EventManagerPlugin));
	//# sourceMappingURL=dom_events.js.map

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	import { Injectable } from '@angular/core';
	import { getDOM } from '../dom_adapter';
	import { EventManagerPlugin } from './event_manager';
	var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	var MODIFIER_KEY_GETTERS = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	/**
	 * @experimental
	 */
	export var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var parts = eventName.toLowerCase().split('.');
	        var domEventName = parts.shift();
	        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	            return null;
	        }
	        var key = KeyEventsPlugin._normalizeKey(parts.pop());
	        var fullKey = '';
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            var index = parts.indexOf(modifierName);
	            if (index > -1) {
	                parts.splice(index, 1);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var result = {};
	        result['domEventName'] = domEventName;
	        result['fullKey'] = fullKey;
	        return result;
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = getDOM().getEventKey(event);
	        key = key.toLowerCase();
	        if (key === ' ') {
	            key = 'space'; // for readability
	        }
	        else if (key === '.') {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	        return function (event /** TODO #9100 */) {
	            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.runGuarded(function () { return handler(event); });
	            }
	        };
	    };
	    /** @internal */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a Map if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    KeyEventsPlugin.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    KeyEventsPlugin.ctorParameters = [];
	    return KeyEventsPlugin;
	}(EventManagerPlugin));
	//# sourceMappingURL=key_events.js.map

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { EventEmitter } from '../facade/async';
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {@link runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {@link run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example
	 * ```
	 * import {Component, NgZone} from '@angular/core';
	 * import {NgIf} from '@angular/common';
	 *
	 * @Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 * @experimental
	 */
	export var NgZone = (function () {
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	        this._hasPendingMicrotasks = false;
	        this._hasPendingMacrotasks = false;
	        this._isStable = true;
	        this._nesting = 0;
	        this._onUnstable = new EventEmitter(false);
	        this._onMicrotaskEmpty = new EventEmitter(false);
	        this._onStable = new EventEmitter(false);
	        this._onErrorEvents = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error('Angular requires Zone.js prolyfill.');
	        }
	        Zone.assertZonePatched();
	        this.outer = this.inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        this.forkInnerZoneWithAngularBehavior();
	    }
	    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     */
	    NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     */
	    NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {@link run} to reenter the Angular zone and do work that updates the application model.
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	    Object.defineProperty(NgZone.prototype, "onUnstable", {
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         */
	        get: function () { return this._onUnstable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	        /**
	         * Notifies when there is no more microtasks enqueue in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         */
	        get: function () { return this._onMicrotaskEmpty; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onStable", {
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         */
	        get: function () { return this._onStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "onError", {
	        /**
	         * Notify that an error has been delivered.
	         */
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "isStable", {
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         */
	        get: function () { return this._isStable; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        get: function () { return this._hasPendingMicrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	        get: function () { return this._hasPendingMacrotasks; },
	        enumerable: true,
	        configurable: true
	    });
	    NgZone.prototype.checkStable = function () {
	        var _this = this;
	        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	            try {
	                this._nesting++;
	                this._onMicrotaskEmpty.emit(null);
	            }
	            finally {
	                this._nesting--;
	                if (!this._hasPendingMicrotasks) {
	                    try {
	                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                    }
	                    finally {
	                        this._isStable = true;
	                    }
	                }
	            }
	        }
	    };
	    NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	        var _this = this;
	        this.inner = this.inner.fork({
	            name: 'angular',
	            properties: { 'isAngularZone': true },
	            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                try {
	                    _this.onEnter();
	                    return delegate.invokeTask(target, task, applyThis, applyArgs);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                try {
	                    _this.onEnter();
	                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                }
	                finally {
	                    _this.onLeave();
	                }
	            },
	            onHasTask: function (delegate, current, target, hasTaskState) {
	                delegate.hasTask(target, hasTaskState);
	                if (current === target) {
	                    // We are only interested in hasTask events which originate from our zone
	                    // (A child hasTask event is not interesting to us)
	                    if (hasTaskState.change == 'microTask') {
	                        _this.setHasMicrotask(hasTaskState.microTask);
	                    }
	                    else if (hasTaskState.change == 'macroTask') {
	                        _this.setHasMacrotask(hasTaskState.macroTask);
	                    }
	                }
	            },
	            onHandleError: function (delegate, current, target, error) {
	                delegate.handleError(target, error);
	                _this.triggerError(error);
	                return false;
	            }
	        });
	    };
	    NgZone.prototype.onEnter = function () {
	        this._nesting++;
	        if (this._isStable) {
	            this._isStable = false;
	            this._onUnstable.emit(null);
	        }
	    };
	    NgZone.prototype.onLeave = function () {
	        this._nesting--;
	        this.checkStable();
	    };
	    NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	        this._hasPendingMicrotasks = hasMicrotasks;
	        this.checkStable();
	    };
	    NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	    NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	    return NgZone;
	}());
	//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { ApplicationRef, NgZone, Optional, RootRenderer, getDebugNode, isDevMode } from '@angular/core';
	import { StringMapWrapper } from '../../facade/collection';
	import { DebugDomRootRenderer } from '../../private_import_core';
	import { getDOM } from '../dom_adapter';
	import { DomRootRenderer } from '../dom_renderer';
	var CORE_TOKENS = {
	    'ApplicationRef': ApplicationRef,
	    'NgZone': NgZone
	};
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	/**
	 * Returns a {@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 */
	export function inspectNativeElement(element /** TODO #9100 */) {
	    return getDebugNode(element);
	}
	/**
	 * @experimental
	 */
	export var NgProbeToken = (function () {
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	export function _createConditionalRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	    if (isDevMode()) {
	        return _createRootRenderer(rootRenderer, extraTokens);
	    }
	    return rootRenderer;
	}
	function _createRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	    return new DebugDomRootRenderer(rootRenderer);
	}
	function _ngProbeTokensToMap(tokens) {
	    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	export var ELEMENT_PROBE_PROVIDERS = [{
	        provide: RootRenderer,
	        useFactory: _createConditionalRootRenderer,
	        deps: [DomRootRenderer, [NgProbeToken, new Optional()]]
	    }];
	export var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
	        provide: RootRenderer,
	        useFactory: _createRootRenderer,
	        deps: [DomRootRenderer, [NgProbeToken, new Optional()]]
	    }];
	//# sourceMappingURL=ng_probe.js.map

/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { Injectable } from './di';
	import { print, warn } from './facade/lang';
	export var Console = (function () {
	    function Console() {
	    }
	    Console.prototype.log = function (message) { print(message); };
	    // Note: for reporting errors use `DOM.logError()` as it is platform specific
	    Console.prototype.warn = function (message) { warn(message); };
	    Console.decorators = [
	        { type: Injectable },
	    ];
	    /** @nocollapse */
	    Console.ctorParameters = [];
	    return Console;
	}());
	//# sourceMappingURL=console.js.map

/***/ },
/* 54 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { OpaqueToken } from '../di/opaque_token';
	/**
	 * @experimental i18n support is experimental.
	 */
	export var LOCALE_ID = new OpaqueToken('LocaleId');
	/**
	 * @experimental i18n support is experimental.
	 */
	export var TRANSLATIONS = new OpaqueToken('Translations');
	/**
	 * @experimental i18n support is experimental.
	 */
	export var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
	//# sourceMappingURL=tokens.js.map

/***/ },
/* 55 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @whatItDoes Provides a hook for centralized exception handling.
	 *
	 * @description
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * @NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 *
	 * @stable
	 */
	export var ErrorHandler = (function () {
	    function ErrorHandler(rethrowError) {
	        if (rethrowError === void 0) { rethrowError = true; }
	        /**
	         * @internal
	         */
	        this._console = console;
	        this.rethrowError = rethrowError;
	    }
	    ErrorHandler.prototype.handleError = function (error) {
	        var originalError = this._findOriginalError(error);
	        var originalStack = this._findOriginalStack(error);
	        var context = this._findContext(error);
	        this._console.error("EXCEPTION: " + this._extractMessage(error));
	        if (originalError) {
	            this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	        }
	        if (originalStack) {
	            this._console.error('ORIGINAL STACKTRACE:');
	            this._console.error(originalStack);
	        }
	        if (context) {
	            this._console.error('ERROR CONTEXT:');
	            this._console.error(context);
	        }
	        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	        // when an error happens. If we do not rethrow, bootstrap will always succeed.
	        if (this.rethrowError)
	            throw error;
	    };
	    /** @internal */
	    ErrorHandler.prototype._extractMessage = function (error) {
	        return error instanceof Error ? error.message : error.toString();
	    };
	    /** @internal */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return error.context ? error.context :
	                this._findContext(error.originalError);
	        }
	        return null;
	    };
	    /** @internal */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var e = error.originalError;
	        while (e && e.originalError) {
	            e = e.originalError;
	        }
	        return e;
	    };
	    /** @internal */
	    ErrorHandler.prototype._findOriginalStack = function (error) {
	        if (!(error instanceof Error))
	            return null;
	        var e = error;
	        var stack = e.stack;
	        while (e instanceof Error && e.originalError) {
	            e = e.originalError;
	            if (e instanceof Error && e.stack) {
	                stack = e.stack;
	            }
	        }
	        return stack;
	    };
	    return ErrorHandler;
	}());
	//# sourceMappingURL=error_handler.js.map

/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { OpaqueToken } from '@angular/core';
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 *
	 * @stable
	 */
	export var DOCUMENT = new OpaqueToken('DocumentToken');
	//# sourceMappingURL=dom_tokens.js.map

/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { NoOpAnimationPlayer } from '../private_import_core';
	var _NoOpAnimationDriver = (function () {
	    function _NoOpAnimationDriver() {
	    }
	    _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	        if (previousPlayers === void 0) { previousPlayers = []; }
	        return new NoOpAnimationPlayer();
	    };
	    return _NoOpAnimationDriver;
	}());
	/**
	 * @experimental
	 */
	export var AnimationDriver = (function () {
	    function AnimationDriver() {
	    }
	    AnimationDriver.NOOP = new _NoOpAnimationDriver();
	    return AnimationDriver;
	}());
	//# sourceMappingURL=animation_driver.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { unimplemented } from '../facade/errors';
	/**
	 * @experimental
	 */
	// TODO (matsko): add typing for the animation function
	export var RenderComponentType = (function () {
	    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	        this.id = id;
	        this.templateUrl = templateUrl;
	        this.slotCount = slotCount;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	        this.animations = animations;
	    }
	    return RenderComponentType;
	}());
	export var RenderDebugInfo = (function () {
	    function RenderDebugInfo() {
	    }
	    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderDebugInfo.prototype, "component", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderDebugInfo.prototype, "references", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderDebugInfo.prototype, "context", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RenderDebugInfo.prototype, "source", {
	        get: function () { return unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return RenderDebugInfo;
	}());
	/**
	 * @experimental
	 */
	export var Renderer = (function () {
	    function Renderer() {
	    }
	    return Renderer;
	}());
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 * @experimental
	 */
	export var RootRenderer = (function () {
	    function RootRenderer() {
	    }
	    return RootRenderer;
	}());
	//# sourceMappingURL=api.js.map

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
	 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
	 * handled.
	 *
	 * See DomSanitizer for more details on security in Angular applications.
	 *
	 * @stable
	 */
	export var SecurityContext;
	(function (SecurityContext) {
	    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	    SecurityContext[SecurityContext["URL"] = 4] = "URL";
	    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	})(SecurityContext || (SecurityContext = {}));
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 * @stable
	 */
	export var Sanitizer = (function () {
	    function Sanitizer() {
	    }
	    return Sanitizer;
	}());
	//# sourceMappingURL=security.js.map

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { Optional, SkipSelf } from '../../di';
	import { getTypeNameForDebugging, isPresent } from '../../facade/lang';
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 * @stable
	 */
	export var IterableDiffers = (function () {
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    IterableDiffers.create = function (factories, parent) {
	        if (isPresent(parent)) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {@link IterableDiffers} instance with the provided factories and return a new
	     * {@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    IterableDiffers.prototype.find = function (iterable) {
	        var factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    return IterableDiffers;
	}());
	//# sourceMappingURL=iterable_differs.js.map

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	import { Optional, SkipSelf } from '../../di';
	import { isPresent } from '../../facade/lang';
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 * @stable
	 */
	export var KeyValueDiffers = (function () {
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    KeyValueDiffers.create = function (factories, parent) {
	        if (isPresent(parent)) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	            return new KeyValueDiffers(factories);
	        }
	        else {
	            return new KeyValueDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	     * {@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    KeyValueDiffers.prototype.find = function (kv) {
	        var factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + kv + "'");
	        }
	    };
	    return KeyValueDiffers;
	}());
	//# sourceMappingURL=keyvalue_differs.js.map

/***/ }
]);
//# sourceMappingURL=app.f40d2a5ff88bced901a4.js.map